<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qiein.erp.pk.web.dao.SceneDao" >

  <resultMap id="BaseResultMap" type="com.qiein.erp.pk.web.entity.po.Scene" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="shoot_id" property="shootId" jdbcType="INTEGER" />
    <result column="scene_name" property="sceneName" jdbcType="VARCHAR" />
    <result column="scene_status" property="sceneStatus" jdbcType="SMALLINT" />
    <result column="priority" property="priority" jdbcType="INTEGER" />
    <result column="company_id" property="companyId" jdbcType="INTEGER" />
  </resultMap>

  <sql id="baseColumn">
      id,shoot_id,scene_name,scene_status,priority,company_id
  </sql>

  <delete id="deleteByPrimaryKey" parameterType="map" >
    delete from hm_erp_scene
    where id = #{id} and company_id = #{companyId}
  </delete>

  <insert id="insert" parameterType="com.qiein.erp.pk.web.entity.po.Scene" >
    insert into hm_erp_scene (id, shoot_id, scene_name, 
      scene_status, priority, company_id
      )
    values (#{id}, #{shootId}, #{sceneName}, 
      #{sceneStatus}, #{priority}, #{companyId}
      )
  </insert>

  <update id="updateByPrimaryKey" parameterType="com.qiein.erp.pk.web.entity.po.Scene" >

    update hm_erp_scene
    <set>
      <if test="shootId != null">
        shoot_id = #{shootId},
      </if>
      <if test="sceneName != null and sceneName != ''">
        scene_name = #{sceneName},
      </if>

      <if test="sceneStatus != null">
        scene_status = #{sceneStatus},
      </if>

      <if test="priority != null">
        priority = #{priority},
      </if>

      <if test="companyId != null">
        company_id = #{companyId}
      </if>
    </set>
    where id = #{id}
    and company_id = #{companyId}
  </update>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select id, shoot_id, scene_name, scene_status, priority, company_id
    from hm_erp_scene
    where id = #{id} and company_id = #{companyId}
  </select>

  <select id="selectAll" resultMap="BaseResultMap" >
    select id, shoot_id, scene_name, scene_status, priority, company_id
    from hm_erp_scene
    where company_id = #{companyId}
  </select>

  <select id="findSceneByRoomId" resultMap="BaseResultMap" parameterType = "map">
    select
    <include refid="baseColumn"/>
    from hm_erp_scene
    where company_id = #{companyId} and shoot_id = #{roomId}
  </select>

 <update id="sceneSort">

   <foreach collection="list" index="index" item="item" separator=";">
     update hm_erp_scene set priority = #{item.priority}
     where id = #{item.id}
     and company_id = #{item.companyId}

   </foreach>

 </update>

  <resultMap id="RoomResultMap" type="com.qiein.erp.pk.web.entity.dto.RoomAndSceneDTO" >
    <id column="room_id" property="roomId" jdbcType="INTEGER" />
    <result column="venue_id" property="venueId" jdbcType="INTEGER" />
    <result column="room_name" property="roomName" jdbcType="VARCHAR" />
    <collection property="scenes" ofType = "com.qiein.erp.pk.web.entity.po.Scene" resultMap="SceneResultMap"/>
  </resultMap>

  <resultMap id="SceneResultMap" type="com.qiein.erp.pk.web.entity.po.Scene" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="shoot_id" property="shootId" jdbcType="INTEGER" />
    <result column="scene_name" property="sceneName" jdbcType="VARCHAR" />
    <result column="scene_status" property="sceneStatus" jdbcType="SMALLINT" />
    <result column="priority" property="priority" jdbcType="INTEGER" />
    <result column="company_id" property="companyId" jdbcType="INTEGER" />
  </resultMap>

  <select id="findRoomAndSceneByVenueId" parameterType="map" resultMap="RoomResultMap">

    select room.venue_id,room.venue_id,room.room_name,scene.id, scene.scene_name
    from hm_erp_venue_room room inner join hm_erp_scene scene
    on  room.room_id = scene.shoot_id and room.company_id = scene.company_id
    where room.company_id = #{companyId}
    and room.venue_id = #{venueId}
    and room.room_type = #{roomType}

  </select>

  <insert id="batInsertOrUpdateScene" parameterType="ArrayList">
    insert into hm_erp_scene (id, shoot_id, scene_name, scene_status, priority, company_id) values

    <foreach collection="list" item="item" index="index" separator=",">
      (#{item.id}, #{item.shootId}, #{item.sceneName}, #{item.sceneStatus}, #{item.priority}, #{item.companyId})
    </foreach>

    ON DUPLICATE KEY UPDATE
    id=values(id)

  </insert>

  <select id="findSceneByVenueId" parameterType="map" resultMap="BaseResultMap">
     select scene.id, scene.shoot_id, scene.scene_name, scene.scene_status, scene.priority, scene.company_id
    from hm_erp_venue_room room inner join hm_erp_scene scene
    on  room.room_id = scene.shoot_id and room.company_id = scene.company_id
    where room.company_id = #{companyId}
    and room.venue_id = #{venueId}
    and room.room_type = #{roomType}
  </select>

  <insert id="batInsertScene" parameterType="ArrayList">

    insert into hm_erp_scene (id, shoot_id, scene_name, scene_status, priority, company_id) values
    <foreach collection="list" item="item" index="index" separator=",">
      (#{item.id}, #{item.shootId}, #{item.sceneName}, #{item.sceneStatus}, #{item.priority}, #{item.companyId})
    </foreach>

  </insert>

  <update id="batUpdateScene" parameterType="ArrayList">
    <foreach collection="list" index="index" item="item" separator=";">
      update hm_erp_scene set
          shoot_id = #{item.shootId},
          scene_name = #{item.sceneName},
          scene_status = #{item.sceneStatus},
          priority = #{item.priority},
          company_id = #{item.companyId}
      where id = #{item.id}
      and company_id = #{item.companyId}
    </foreach>
  </update>


</mapper>